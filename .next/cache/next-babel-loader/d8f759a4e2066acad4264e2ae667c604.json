{"ast":null,"code":"// Core\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nexport const logger = createLogger({\n  duration: true,\n  collapsed: true,\n  colors: {\n    title: action => action.error ? 'firebrick' : 'deepskyblue',\n    prevState: () => '#1C5FAF',\n    action: () => '#149945',\n    nextState: () => '#A47104',\n    error: () => '#ff0005'\n  }\n});\nconst sagaMiddleware = createSagaMiddleware();\nconst devEnvironment = true;\nconst middleware = [sagaMiddleware];\n\nif (devEnvironment) {\n  middleware.push(logger);\n}\n\nexport { middleware, sagaMiddleware };","map":{"version":3,"sources":["/Users/amulyk/Desktop/projects/alldgads-prototype/src/init/middleware.ts"],"names":["createLogger","createSagaMiddleware","logger","duration","collapsed","colors","title","action","error","prevState","nextState","sagaMiddleware","devEnvironment","middleware","push"],"mappings":"AAAA;AACA,SAASA,YAAT,QAA6B,cAA7B;AAEA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAO,MAAMC,MAAM,GAAGF,YAAY,CAAC;AACjCG,EAAAA,QAAQ,EAAE,IADuB;AAEjCC,EAAAA,SAAS,EAAE,IAFsB;AAGjCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAGC,MAAD,IAAqBA,MAAM,CAACC,KAAP,GAAe,WAAf,GAA6B,aADnD;AAENC,IAAAA,SAAS,EAAE,MAAc,SAFnB;AAGNF,IAAAA,MAAM,EAAE,MAAc,SAHhB;AAING,IAAAA,SAAS,EAAE,MAAc,SAJnB;AAKNF,IAAAA,KAAK,EAAE,MAAc;AALf;AAHyB,CAAD,CAA3B;AAYP,MAAMG,cAAc,GAAGV,oBAAoB,EAA3C;AAEA,MAAMW,cAAc,OAApB;AAEA,MAAMC,UAAwB,GAAG,CAACF,cAAD,CAAjC;;AAEA,IAAIC,cAAJ,EAAoB;AAClBC,EAAAA,UAAU,CAACC,IAAX,CAAgBZ,MAAhB;AACD;;AAED,SAASW,UAAT,EAAqBF,cAArB","sourcesContent":["// Core\nimport { createLogger } from 'redux-logger';\nimport { Middleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nexport const logger = createLogger({\n  duration: true,\n  collapsed: true,\n  colors: {\n    title: (action): string => (action.error ? 'firebrick' : 'deepskyblue'),\n    prevState: (): string => '#1C5FAF',\n    action: (): string => '#149945',\n    nextState: (): string => '#A47104',\n    error: (): string => '#ff0005',\n  },\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst devEnvironment = process.env.NODE_ENV === 'development';\n\nconst middleware: Middleware[] = [sagaMiddleware];\n\nif (devEnvironment) {\n  middleware.push(logger);\n}\n\nexport { middleware, sagaMiddleware };\n"]},"metadata":{},"sourceType":"module"}