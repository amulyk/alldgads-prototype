{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-case-declarations */\n// Types\nimport { STARSHIPS_FETCH_ASYNC, STARSHIPS_FILL, STARSHIPS_SET_FETCHING_ERROR, STARSHIPS_START_FETCHING, STARSHIPS_STOP_FETCHING } from './types';\nconst initialState = {\n  data: [],\n  isFetching: false,\n  error: false\n};\nexport const starshipsReducer = (state = initialState, action) => {\n  if (!('type' in action)) {\n    return state;\n  }\n\n  switch (action.type) {\n    case STARSHIPS_START_FETCHING:\n      return _objectSpread({}, state, {\n        isFetching: true\n      });\n\n    case STARSHIPS_STOP_FETCHING:\n      return _objectSpread({}, state, {\n        isFetching: false\n      });\n\n    case STARSHIPS_SET_FETCHING_ERROR:\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    case STARSHIPS_FILL:\n      return _objectSpread({}, state, {}, action.payload);\n\n    case STARSHIPS_FETCH_ASYNC:\n      return state;\n\n    default:\n      const x = action;\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n  }\n\n  return state;\n};","map":{"version":3,"sources":["/Users/amulyk/Desktop/projects/alldgads-prototype/src/bus/starships/reducer.ts"],"names":["STARSHIPS_FETCH_ASYNC","STARSHIPS_FILL","STARSHIPS_SET_FETCHING_ERROR","STARSHIPS_START_FETCHING","STARSHIPS_STOP_FETCHING","initialState","data","isFetching","error","starshipsReducer","state","action","type","payload","x"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA,SAGEA,qBAHF,EAIEC,cAJF,EAKEC,4BALF,EAMEC,wBANF,EAOEC,uBAPF,QASO,SATP;AAiBA,MAAMC,YAA4B,GAAG;AACnCC,EAAAA,IAAI,EAAE,EAD6B;AAEnCC,EAAAA,UAAU,EAAE,KAFuB;AAGnCC,EAAAA,KAAK,EAAE;AAH4B,CAArC;AAMA,OAAO,MAAMC,gBAAgB,GAAG,CAC9BC,KAAK,GAAGL,YADsB,EAE9BM,MAF8B,KAGX;AACnB,MAAI,EAAE,UAAUA,MAAZ,CAAJ,EAAyB;AACvB,WAAOD,KAAP;AACD;;AACD,UAAQC,MAAM,CAACC,IAAf;AACE,SAAKT,wBAAL;AACE,+BAAYO,KAAZ;AAAmBH,QAAAA,UAAU,EAAE;AAA/B;;AACF,SAAKH,uBAAL;AACE,+BAAYM,KAAZ;AAAmBH,QAAAA,UAAU,EAAE;AAA/B;;AACF,SAAKL,4BAAL;AACE,+BAAYQ,KAAZ;AAAmBF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAAjC;;AACF,SAAKZ,cAAL;AACE,+BAAYS,KAAZ,MAAsBC,MAAM,CAACE,OAA7B;;AACF,SAAKb,qBAAL;AACE,aAAOU,KAAP;;AAEF;AACE,YAAMI,CAAQ,GAAGH,MAAjB;AAAyB;AAb7B;;AAgBA,SAAOD,KAAP;AACD,CAxBM","sourcesContent":["/* eslint-disable no-case-declarations */\n// Types\nimport {\n  ErrorHttpAction,\n  Starship,\n  STARSHIPS_FETCH_ASYNC,\n  STARSHIPS_FILL,\n  STARSHIPS_SET_FETCHING_ERROR,\n  STARSHIPS_START_FETCHING,\n  STARSHIPS_STOP_FETCHING,\n  StarshipsActionTypes,\n} from './types';\n\nexport type StarshipsState = {\n  data: Starship[];\n  isFetching: boolean;\n  error: false | ErrorHttpAction;\n};\n\nconst initialState: StarshipsState = {\n  data: [],\n  isFetching: false,\n  error: false,\n};\n\nexport const starshipsReducer = (\n  state = initialState,\n  action: StarshipsActionTypes,\n): StarshipsState => {\n  if (!('type' in action)) {\n    return state;\n  }\n  switch (action.type) {\n    case STARSHIPS_START_FETCHING:\n      return { ...state, isFetching: true };\n    case STARSHIPS_STOP_FETCHING:\n      return { ...state, isFetching: false };\n    case STARSHIPS_SET_FETCHING_ERROR:\n      return { ...state, error: action.payload };\n    case STARSHIPS_FILL:\n      return { ...state, ...action.payload };\n    case STARSHIPS_FETCH_ASYNC:\n      return state;\n\n    default:\n      const x: never = action; // eslint-disable-line @typescript-eslint/no-unused-vars\n  }\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module"}