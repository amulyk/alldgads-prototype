{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/amulyk/Desktop/projects/alldgads-prototype/src/lib/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch'; // @ts-ignore\n\nlet apolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n// @ts-ignore\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  // @ts-ignore\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    // @ts-ignore\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx; // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      // @ts-ignore\n\n      const apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              }),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 74\n              },\n              __self: this\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n// @ts-ignore\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n  // @ts-ignore\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  } // @ts-ignore\n\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient(initialState = {}) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'https://api.graph.cool/simple/v1/cixmkt2ul01q00122mksg82pn',\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/amulyk/Desktop/projects/alldgads-prototype/src/lib/apollo.tsx"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","fetch","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","link","uri","credentials","restore"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport fetch from 'isomorphic-unfetch'\n\n// @ts-ignore\nlet apolloClient = null\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n// @ts-ignore\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  // @ts-ignore\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState)\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.')\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    // @ts-ignore\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      // @ts-ignore\n      const apolloClient = (ctx.apolloClient = initApolloClient())\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {}\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx)\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            )\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind()\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract()\n\n      return {\n        ...pageProps,\n        apolloState,\n      }\n    }\n  }\n\n  return WithApollo\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n// @ts-ignore\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState)\n  }\n\n  // Reuse client on the client-side\n  // @ts-ignore\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState)\n  }\n\n  // @ts-ignore\n  return apolloClient\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'https://api.graph.cool/simple/v1/cixmkt2ul01q00122mksg82pn', // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n      fetch,\n    }),\n    cache: new InMemoryCache().restore(initialState),\n  })\n}\n"]},"metadata":{},"sourceType":"module"}