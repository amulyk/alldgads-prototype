{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Core\nimport { useMutation } from '@apollo/react-hooks';\nimport { useState, useEffect } from 'react'; // Types\n\n// Mutations\nimport mutationCreateAccount from './gql/mutationLogin.graphql';\nexport const useLogin = () => {\n  const [loginToServer, {\n    data\n  }] = useMutation(mutationCreateAccount);\n  const {\n    0: authenticatedAccount,\n    1: updateAuthenticatedAccount\n  } = useState();\n  useEffect(() => {\n    if (data) {\n      updateAuthenticatedAccount(data);\n    }\n  }, [data]);\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    name: '',\n    password: ''\n  });\n\n  const handleChange = event => {\n    event.persist();\n    setValues(prevValues => _objectSpread({}, prevValues, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const login = () => {\n    const {\n      name,\n      password\n    } = values;\n    loginToServer({\n      variables: {\n        name,\n        password\n      }\n    });\n  };\n\n  return {\n    login,\n    handleChange,\n    authenticatedAccount: authenticatedAccount ? authenticatedAccount.login : null\n  };\n};","map":{"version":3,"sources":["/Users/amulyk/Desktop/projects/alldgads-prototype/src/bus/user/hooks/useLogin/index.ts"],"names":["useMutation","useState","useEffect","mutationCreateAccount","useLogin","loginToServer","data","authenticatedAccount","updateAuthenticatedAccount","values","setValues","name","password","handleChange","event","persist","prevValues","target","value","login","variables"],"mappings":";;;;;;;;;;;;AAAA;AACA,SAASA,WAAT,QAA4B,qBAA5B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAiD,OAAjD,C,CAEA;;AAOA;AACA,OAAOC,qBAAP,MAAkC,6BAAlC;AAUA,OAAO,MAAMC,QAAQ,GAAG,MAAoB;AAC1C,QAAM,CAACC,aAAD,EAAgB;AAAEC,IAAAA;AAAF,GAAhB,IAA4BN,WAAW,CAGzCG,qBAHyC,CAA7C;AAKA,QAAM;AAAA,OAACI,oBAAD;AAAA,OAAuBC;AAAvB,MAAqDP,QAAQ,EAAnE;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,IAAJ,EAAU;AACRE,MAAAA,0BAA0B,CAACF,IAAD,CAA1B;AACD;AACF,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT;AAMA,QAAM;AAAA,OAACG,MAAD;AAAA,OAASC;AAAT,MAAsBT,QAAQ,CAAiB;AACnDU,IAAAA,IAAI,EAAE,EAD6C;AAEnDC,IAAAA,QAAQ,EAAE;AAFyC,GAAjB,CAApC;;AAKA,QAAMC,YAA8B,GAAIC,KAAD,IAAW;AAChDA,IAAAA,KAAK,CAACC,OAAN;AACAL,IAAAA,SAAS,CAAEM,UAAD,sBACLA,UADK;AAER,OAACF,KAAK,CAACG,MAAN,CAAaN,IAAd,GAAqBG,KAAK,CAACG,MAAN,CAAaC;AAF1B,MAAD,CAAT;AAID,GAND;;AAQA,QAAMC,KAAK,GAAG,MAAY;AACxB,UAAM;AAAER,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAqBH,MAA3B;AAEAJ,IAAAA,aAAa,CAAC;AACZe,MAAAA,SAAS,EAAE;AACTT,QAAAA,IADS;AAETC,QAAAA;AAFS;AADC,KAAD,CAAb;AAMD,GATD;;AAWA,SAAO;AACLO,IAAAA,KADK;AAELN,IAAAA,YAFK;AAGLN,IAAAA,oBAAoB,EAAEA,oBAAoB,GAAGA,oBAAoB,CAACY,KAAxB,GAAgC;AAHrE,GAAP;AAKD,CA3CM","sourcesContent":["// Core\nimport { useMutation } from '@apollo/react-hooks';\nimport { useState, useEffect, ChangeEvent } from 'react';\n\n// Types\nimport {\n  login as Login,\n  loginVariables as LoginVariables,\n  login_login as loginEntityType,\n} from './gql/__generated__/login';\n\n// Mutations\nimport mutationCreateAccount from './gql/mutationLogin.graphql';\n\ntype HandleChangeType = (event: ChangeEvent<HTMLInputElement>) => void;\n\ntype UseLoginType = {\n  login: () => void;\n  handleChange: HandleChangeType;\n  authenticatedAccount: loginEntityType | null;\n}\n\nexport const useLogin = (): UseLoginType => {\n  const [loginToServer, { data }] = useMutation<\n    Login,\n    LoginVariables\n    >(mutationCreateAccount);\n\n  const [authenticatedAccount, updateAuthenticatedAccount] = useState<Login>();\n\n  useEffect(() => {\n    if (data) {\n      updateAuthenticatedAccount(data);\n    }\n  }, [data]);\n\n  const [values, setValues] = useState<LoginVariables>({\n    name: '',\n    password: '',\n  });\n\n  const handleChange: HandleChangeType = (event) => {\n    event.persist();\n    setValues((prevValues) => ({\n      ...prevValues,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  const login = (): void => {\n    const { name, password } = values;\n\n    loginToServer({\n      variables: {\n        name,\n        password,\n      },\n    });\n  };\n\n  return {\n    login,\n    handleChange,\n    authenticatedAccount: authenticatedAccount ? authenticatedAccount.login : null,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}