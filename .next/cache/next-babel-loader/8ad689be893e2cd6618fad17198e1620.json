{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Core\nimport { useMutation } from '@apollo/react-hooks';\nimport { useState, useEffect } from 'react'; // Types\n\n// Mutations\nvar mutationCreateAccount = { kind: \"Document\", definitions: [{ kind: \"OperationDefinition\", operation: \"mutation\", name: { kind: \"Name\", value: \"signUp\" }, variableDefinitions: [{ kind: \"VariableDefinition\", variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"name\" } }, type: { kind: \"NonNullType\", type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } } }, directives: [] }, { kind: \"VariableDefinition\", variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"email\" } }, type: { kind: \"NonNullType\", type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } } }, directives: [] }, { kind: \"VariableDefinition\", variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"password\" } }, type: { kind: \"NonNullType\", type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } } }, directives: [] }], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"signUp\" }, arguments: [{ kind: \"Argument\", name: { kind: \"Name\", value: \"name\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"name\" } } }, { kind: \"Argument\", name: { kind: \"Name\", value: \"email\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"email\" } } }, { kind: \"Argument\", name: { kind: \"Name\", value: \"password\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"password\" } } }], directives: [], selectionSet: { kind: \"SelectionSet\", selections: [{ kind: \"Field\", name: { kind: \"Name\", value: \"name\" }, arguments: [], directives: [] }] } }] } }], loc: { start: 0, end: 154, source: { body: \"mutation signUp($name: String!, $email: String!, $password: String!) {\\n    signUp(name: $name, email: $email, password: $password) {\\n        name\\n    }\\n}\\n\", name: \"GraphQL request\", locationOffset: { line: 1, column: 1 } } } };\nexport const useCreateAccount = () => {\n  const [addUser, {\n    data\n  }] = useMutation(mutationCreateAccount);\n  const {\n    0: createdAccount,\n    1: updateCreatedAccount\n  } = useState();\n  useEffect(() => {\n    if (data) {\n      updateCreatedAccount(data);\n    }\n  }, [data]);\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    name: '',\n    email: '',\n    password: ''\n  });\n\n  const handleChange = event => {\n    event.persist();\n    setValues(prevValues => _objectSpread({}, prevValues, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const saveAccount = () => {\n    const {\n      name,\n      email,\n      password\n    } = values;\n    addUser({\n      variables: {\n        name,\n        email,\n        password\n      }\n    });\n  };\n\n  return {\n    saveAccount,\n    handleChange,\n    createdAccount: createdAccount ? createdAccount.signUp : null\n  };\n};","map":{"version":3,"sources":["/Users/amulyk/Desktop/projects/alldgads-prototype/src/bus/user/hooks/useCreateAccount/index.ts"],"names":["useMutation","useState","useEffect","useCreateAccount","addUser","data","mutationCreateAccount","createdAccount","updateCreatedAccount","values","setValues","name","email","password","handleChange","event","persist","prevValues","target","value","saveAccount","variables","signUp"],"mappings":";;;;;;;;;;;;AAAA;AACA,SAASA,WAAT,QAA4B,qBAA5B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAiD,OAAjD,C,CAEA;;AAOA;;AAWA,OAAO,MAAMC,gBAAgB,GAAG,MAA4B;AAC1D,QAAM,CAACC,OAAD,EAAU;AAAEC,IAAAA;AAAF,GAAV,IAAsBL,WAAW,CAGnCM,qBAHmC,CAAvC;AAKA,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAyCP,QAAQ,EAAvD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,IAAJ,EAAU;AACRG,MAAAA,oBAAoB,CAACH,IAAD,CAApB;AACD;AACF,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT;AAMA,QAAM;AAAA,OAACI,MAAD;AAAA,OAASC;AAAT,MAAsBT,QAAQ,CAAkB;AACpDU,IAAAA,IAAI,EAAE,EAD8C;AAEpDC,IAAAA,KAAK,EAAE,EAF6C;AAGpDC,IAAAA,QAAQ,EAAE;AAH0C,GAAlB,CAApC;;AAMA,QAAMC,YAA8B,GAAIC,KAAD,IAAW;AAChDA,IAAAA,KAAK,CAACC,OAAN;AACAN,IAAAA,SAAS,CAAEO,UAAD,sBACLA,UADK;AAER,OAACF,KAAK,CAACG,MAAN,CAAaP,IAAd,GAAqBI,KAAK,CAACG,MAAN,CAAaC;AAF1B,MAAD,CAAT;AAID,GAND;;AAQA,QAAMC,WAAW,GAAG,MAAY;AAC9B,UAAM;AAAET,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAA4BJ,MAAlC;AAEAL,IAAAA,OAAO,CAAC;AACNiB,MAAAA,SAAS,EAAE;AACTV,QAAAA,IADS;AAETC,QAAAA,KAFS;AAGTC,QAAAA;AAHS;AADL,KAAD,CAAP;AAOD,GAVD;;AAYA,SAAO;AACLO,IAAAA,WADK;AAELN,IAAAA,YAFK;AAGLP,IAAAA,cAAc,EAAEA,cAAc,GAAGA,cAAc,CAACe,MAAlB,GAA2B;AAHpD,GAAP;AAKD,CA7CM","sourcesContent":["// Core\nimport { useMutation } from '@apollo/react-hooks';\nimport { useState, useEffect, ChangeEvent } from 'react';\n\n// Types\nimport {\n  signUp,\n  signUpVariables,\n  signUp_signUp as createAccountEntityType,\n} from './gql/__generated__/signUp';\n\n// Mutations\nimport mutationCreateAccount from './gql/mutationCreateAccount.graphql';\n\ntype HandleChangeType = (event: ChangeEvent<HTMLInputElement>) => void;\n\ntype UseCreateAccountType = {\n  saveAccount: () => void;\n  handleChange: HandleChangeType;\n  createdAccount: createAccountEntityType | null;\n}\n\nexport const useCreateAccount = (): UseCreateAccountType => {\n  const [addUser, { data }] = useMutation<\n    signUp,\n    signUpVariables\n    >(mutationCreateAccount);\n\n  const [createdAccount, updateCreatedAccount] = useState<signUp>();\n\n  useEffect(() => {\n    if (data) {\n      updateCreatedAccount(data);\n    }\n  }, [data]);\n\n  const [values, setValues] = useState<signUpVariables>({\n    name: '',\n    email: '',\n    password: '',\n  });\n\n  const handleChange: HandleChangeType = (event) => {\n    event.persist();\n    setValues((prevValues) => ({\n      ...prevValues,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  const saveAccount = (): void => {\n    const { name, email, password } = values;\n\n    addUser({\n      variables: {\n        name,\n        email,\n        password,\n      },\n    });\n  };\n\n  return {\n    saveAccount,\n    handleChange,\n    createdAccount: createdAccount ? createdAccount.signUp : null,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}